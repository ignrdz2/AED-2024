1. Combinaciones de Incrementos Publicadas
Incrementos de Hibbard
La secuencia de Hibbard utiliza incrementos de la forma (2^k - 1). Esta secuencia fue propuesta por Frank W. Hibbard y es conocida por ser eficiente y f√°cil de calcular.

Implementaci√≥n:
Para implementar los incrementos de Hibbard, primero se genera la secuencia hasta que el valor m√°s grande sea menor que el tama√±o del arreglo. Luego, se utiliza esta secuencia en orden decreciente durante el proceso de ordenamiento.

Incrementos de Sedgewick
Robert Sedgewick propuso varias secuencias de incrementos, siendo una de las m√°s conocidas la que utiliza incrementos de la forma 1,5,19,41,109,‚Ä¶, definida por las f√≥rmulas 9‚ãÖ4 i ‚àí9‚ãÖ2 i +1 y 4 ùëñ ‚àí 3 ‚ãÖ 2 ùëñ + 1 4 i ‚àí3‚ãÖ2 i +1 para ùëñ ‚â• 0 i‚â•0.

Implementaci√≥n:
La secuencia se genera aplicando las f√≥rmulas hasta que el incremento m√°s grande es menor que el tama√±o del arreglo. Estos incrementos se utilizan en orden decreciente para el ordenamiento.

Incrementos de Pratt
Vaughan Pratt propuso una secuencia de incrementos que es una combinaci√≥n de potencias de 2 y 3. La secuencia incluye n√∫meros de la forma 2^i‚ãÖ3^j.

Implementaci√≥n:
La secuencia se construye generando todos los productos de las potencias de 2 y 3 que sean menores que el tama√±o del arreglo. Estos incrementos se utilizan en orden decreciente para el ordenamiento.

2. An√°lisis del Orden del Tiempo de Ejecuci√≥n

El tiempo de ejecuci√≥n del algoritmo de Shellsort depende de la secuencia de incrementos utilizada. A continuaci√≥n, se presenta un an√°lisis del tiempo de ejecuci√≥n para las secuencias descritas:

- Incrementos de Hibbard: El tiempo de ejecuci√≥n es O(n^(3/2)) Aunque es mejor que el O(n^2) de algoritmos simples, no es tan eficiente como otras secuencias m√°s avanzadas.

- Incrementos de Sedgewick: El tiempo de ejecuci√≥n es (O(n^(4/3)). Es m√°s eficiente que la secuencia de Hibbard debido a una mejor dispersi√≥n de los elementos durante el proceso de ordenamiento.

- Incrementos de Pratt: La secuencia de Pratt tiene un tiempo de ejecuci√≥n de (O(nlog^2n)), siendo una de las m√°s eficientes debido a la combinaci√≥n de potencias de 2 y 3 que permite una mejor distribuci√≥n de los elementos.

3. Ejemplificaci√≥n del Ordenamiento

Para mostrar c√≥mo se ordena el conjunto de datos utilizando las tres combinaciones de incrementos, describiremos el proceso de forma te√≥rica.
Conjunto de Datos
256, 458, 655, 298, 043, 648, 778, 621, 655, 019, 124, 847

Proceso con Incrementos de Hibbard
1. Generaci√≥n de la Secuencia de Incrementos:
   La secuencia de incrementos es (1, 3, 7, 15, 31, ), hasta que el incremento es menor que el tama√±o del arreglo (12 elementos).
   Por ejemplo: (1, 3, 7).

2. Ordenamiento:
   - Para (gap = 7), el arreglo se divide en subarreglos y se aplica inserci√≥n directa.
   - Para (gap = 3), se repite el proceso.
   - Para (gap = 1), se realiza la inserci√≥n final.

Proceso con Incrementos de Sedgewick

1. Generaci√≥n de la Secuencia de Incrementos:
   La secuencia de incrementos es (1, 5, 19, 41, 109).
   Por ejemplo: (1, 5).

2. Ordenamiento:
   - Para (gap = 5), el arreglo se divide en subarreglos y se aplica inserci√≥n directa.
   - Para (gap = 1), se realiza la inserci√≥n final.

 Proceso con Incrementos de Pratt

1. Generaci√≥n de la Secuencia de Incrementos:
   La secuencia de incrementos incluye n√∫meros de la forma (2^i cdot 3^j), hasta que el incremento es menor que el tama√±o del arreglo.
   Por ejemplo: (1, 2, 3, 4, 6, 8, 9).

2. Ordenamiento:
   - Para (gap = 9), el arreglo se divide en subarreglos y se aplica inserci√≥n directa.
   - Para (gap = 8), se repite el proceso.
   - Para (gap = 6), se repite el proceso.
   - Para (gap = 4), se repite el proceso.
   - Para (gap = 3), se repite el proceso.
   - Para (gap = 2), se repite el proceso.
   - Para (gap = 1), se realiza la inserci√≥n final.


EJERCICIO 2

1. Algoritmo Burbuja: Paso a Paso

Para el conjunto de datos:


44 - 55 - 12 - 42 - 94 - 18 - 6 - 67


Vamos a ordenar el conjunto utilizando el algoritmo de Burbuja, mostrando el estado del conjunto en cada iteraci√≥n.

Inicial:

44 - 55 - 12 - 42 - 94 - 18 - 6 - 67


Iteraci√≥n 1:

44 - 55 - 12 - 42 - 94 - 18 - 6 - 67 (inicial)
44 - 12 - 55 - 42 - 94 - 18 - 6 - 67
44 - 12 - 42 - 55 - 94 - 18 - 6 - 67
44 - 12 - 42 - 55 - 18 - 94 - 6 - 67
44 - 12 - 42 - 55 - 18 - 6 - 94 - 67
44 - 12 - 42 - 55 - 18 - 6 - 67 - 94


Iteraci√≥n 2:

44 - 12 - 42 - 55 - 18 - 6 - 67 - 94 (inicial)
12 - 44 - 42 - 55 - 18 - 6 - 67 - 94
12 - 42 - 44 - 55 - 18 - 6 - 67 - 94
12 - 42 - 44 - 18 - 55 - 6 - 67 - 94
12 - 42 - 44 - 18 - 6 - 55 - 67 - 94


Iteraci√≥n 3:

12 - 42 - 44 - 18 - 6 - 55 - 67 - 94 (inicial)
12 - 42 - 44 - 18 - 6 - 55 - 67 - 94
12 - 42 - 18 - 44 - 6 - 55 - 67 - 94
12 - 42 - 18 - 6 - 44 - 55 - 67 - 94


Iteraci√≥n 4:

12 - 42 - 18 - 6 - 44 - 55 - 67 - 94 (inicial)
12 - 42 - 18 - 6 - 44 - 55 - 67 - 94
12 - 18 - 42 - 6 - 44 - 55 - 67 - 94
12 - 18 - 6 - 42 - 44 - 55 - 67 - 94


Iteraci√≥n 5:

12 - 18 - 6 - 42 - 44 - 55 - 67 - 94 (inicial)
12 - 18 - 6 - 42 - 44 - 55 - 67 - 94
12 - 6 - 18 - 42 - 44 - 55 - 67 - 94


Iteraci√≥n 6:

12 - 6 - 18 - 42 - 44 - 55 - 67 - 94 (inicial)
6 - 12 - 18 - 42 - 44 - 55 - 67 - 94


Iteraci√≥n 7:

6 - 12 - 18 - 42 - 44 - 55 - 67 - 94 (inicial)


S√≠, el conjunto queda ordenado antes de la √∫ltima iteraci√≥n.


2. Mejora del Algoritmo Burbuja
El algoritmo de Burbuja puede mejorarse de varias maneras. Aqu√≠ hay dos mejoras comunes:

Mejora 1: Algoritmo Burbuja Optimizado con Marcador de Intercambio

Esta mejora agrega una bandera que indica si se realiz√≥ alg√∫n intercambio durante una pasada. Si no se realiz√≥ ning√∫n intercambio, el arreglo ya est√° ordenado y el algoritmo puede detenerse.

Pseudoc√≥digo:
procedure bubbleSortOptimized(A: lista de elementos)
    n = length(A)
    for i from 1 to n - 1 do
        swapped = false
        for j from 0 to n - i - 1 do
            if A[j] > A[j + 1] then
                swap(A[j], A[j + 1])
                swapped = true
        end for
        if not swapped then
            break
        end if
    end for
end procedure

Mejora 2: Algoritmo Burbuja con Borde Ajustado

En cada iteraci√≥n, despu√©s de la primera pasada completa, se puede ajustar el borde hasta donde es necesario seguir comparando, ya que la mayor clave se habr√° movido a su posici√≥n final en cada pasada.

procedure bubbleSortAdjusted(A: list of sortable items)
    n = length(A)
    repeat
        new_n = 0
        for i from 1 to n - 1 do
            if A[i - 1] > A[i] then
                swap(A[i - 1], A[i])
                new_n = i
            end if
        end for
        n = new_n
    until n = 0
end procedure


3. Ejemplificaci√≥n del Conjunto de Datos

 Mejora 1: Burbuja Optimizado

Conjunto de Datos:

44 - 55 - 12 - 42 - 94 - 18 - 6 - 67


Paso a Paso:

Iteraci√≥n 1:
44 - 55 - 12 - 42 - 94 - 18 - 6 - 67
44 - 12 - 55 - 42 - 94 - 18 - 6 - 67
44 - 12 - 42 - 55 - 94 - 18 - 6 - 67
44 - 12 - 42 - 55 - 18 - 94 - 6 - 67
44 - 12 - 42 - 55 - 18 - 6 - 94 - 67
44 - 12 - 42 - 55 - 18 - 6 - 67 - 94

Iteraci√≥n 2:
12 - 44 - 42 - 55 - 18 - 6 - 67 - 94
12 - 42 - 44 - 55 - 18 - 6 - 67 - 94
12 - 42 - 44 - 18 - 55 - 6 - 67 - 94
12 - 42 - 44 - 18 - 6 - 55 - 67 - 94

Iteraci√≥n 3:
12 - 42 - 44 - 18 - 6 - 55 - 67 - 94
12 - 42 - 18 - 44 - 6 - 55 - 67 - 94
12 - 42 - 18 - 6 - 44 - 55 - 67 - 94

Iteraci√≥n 4:
12 - 18 - 42 - 6 - 44 - 55 - 67 - 94
12 - 18 - 6 - 42 - 44 - 55 - 67 - 94

Iteraci√≥n 5:
12 - 6 - 18 - 42 - 44 - 55 - 67 - 94

Iteraci√≥n 6:
6 - 12 - 18 - 42 - 44 - 55 - 67 - 94


Mejora 2: Burbuja con Borde Ajustado

Conjunto de Datos:

44 - 55 - 12 - 42 - 94 - 18 - 6 - 67


Paso a Paso:

Iteraci√≥n 1:
44 - 55 - 12 - 42 - 94 - 18 - 6 - 67
44 - 12 - 55 - 42 - 94 - 18 - 6 - 67
44 - 12 - 42 - 55 - 94 - 18 - 6 - 67
44 - 12 - 42 - 55 - 18 - 94 - 6 - 67
44 - 12 - 42 - 55 - 18 - 6 - 94 - 67
44 - 12 - 42 - 55 - 18 - 6 - 67 - 94

Iteraci√≥n 2:
12 - 44 - 42 - 55 - 18 - 6 - 67 - 94
12 - 42 - 44 - 55 - 18 - 6 - 67 - 94
12 - 42 - 44 - 18 - 55 - 6 - 67 - 94
12 - 42 - 44 - 18 - 6 - 55 - 67 - 94

Iteraci√≥n 3:
12 - 42 - 44 - 18 - 6 - 55 - 67 - 94
12 - 42 - 18 - 44 - 6 - 55 - 67 - 94
12 - 42 - 18 - 6 - 44 - 55 - 67 - 94

Iteraci√≥n 4:
12 - 18 - 42 - 6 - 44 - 55 - 67 - 94
12

 - 18 - 6 - 42 - 44 - 55 - 67 - 94

Iteraci√≥n 5:
12 - 6 - 18 - 42 - 44 - 55 - 67 - 94

Iteraci√≥n 6:
6 - 12 - 18 - 42 - 44 - 55 - 67 - 94


4. Algoritmo Shakersort (Cocktail Sort)
Shakersort es una variaci√≥n del algoritmo Burbuja que ordena en ambas direcciones en cada pasada a trav√©s de la lista. Esto permite que los elementos grandes "burbujeen" hacia el final y los elementos peque√±os "burbujeen" hacia el principio.

Conjunto de Datos:

44 - 55 - 12 - 42 - 94 - 18 - 6 - 67


Paso a Paso:

Pasada 1 (Izquierda a Derecha):

44 - 55 - 12 - 42 - 94 - 18 - 6 - 67
44 - 12 - 55 - 42 - 94 - 18 - 6 - 67
44 - 12 - 42 - 55 - 94 - 18 - 6 - 67
44 - 12 - 42 - 55 - 18 - 94 - 6 - 67
44 - 12 - 42 - 55 - 18 - 6 - 94 - 67
44 - 12 - 42 - 55 - 18 - 6 - 67 - 94


Pasada 1 (Derecha a Izquierda):

44 - 12 - 42 - 55 - 18 - 6 - 67 - 94
44 - 12 - 42 - 18 - 55 - 6 - 67 - 94
44 - 12 - 6 - 42 - 18 - 55 - 67 - 94
44 - 6 - 12 - 42 - 18 - 55 - 67 - 94
6 - 44 - 12 - 42 - 18 - 55 - 67 - 94


Pasada 2 (Izquierda a Derecha):

6 - 44 - 12 - 42 - 18 - 55 - 67 - 94
6 - 12 - 44 - 42 - 18 - 55 - 67 - 94
6 - 12 - 42 - 44 - 18 - 55 - 67 - 94
6 - 12 - 42 - 18 - 44 - 55 - 67 - 94


Pasada 2 (Derecha a Izquierda):

6 - 12 - 42 - 18 - 44 - 55 - 67 - 94
6 - 12 - 18 - 42 - 44 - 55 - 67 - 94


Pasada 3 (Izquierda a Derecha):

6 - 12 - 18 - 42 - 44 - 55 - 67 - 94
